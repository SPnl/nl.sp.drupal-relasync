<?php

/* Deze module zorgt voor het aanmaken/verwijderen van Drupal-rollen op basis van relaties in CiviCRM.
 * Dit is een gewijzigde versie van de civicrm_member_roles module die met CiviCRM wordt meegeleverd.
 */

/**
 * Implementation of hook_menu().
 */
function sprelasync_menu() {
    if(!civicrm_initialize()) {
        return;
    }
    $items = array();
    $items['admin/config/civicrm/sprelasync'] = array(
        'title'            => t('CiviCRM Relationship Roles Sync'),
        'description'      => t('Add/remove association rules and configure settings. Also perform manual synchronization.'),
        'page callback'    => 'sprelasync_show_rules',
        'access callback'  => 'user_access',
        'access arguments' => array('access civicrm relationship role setting'),
        'type'             => MENU_NORMAL_ITEM,
    );

    $items['admin/config/civicrm/sprelasync/show_rules'] = array(
        'title'            => t('List Association Rule(s)'),
        'access callback'  => 'user_access',
        'access arguments' => array('access civicrm relationship role setting'),
        'weight'           => -5,
        'type'             => MENU_DEFAULT_LOCAL_TASK,
    );

    $items['admin/config/civicrm/sprelasync/add_rule'] = array(
        'title'            => t('Add Association Rule'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('sprelasync_add_rule_form'),
        'access callback'  => 'user_access',
        'access arguments' => array('access civicrm relationship role setting'),
        'type'             => MENU_LOCAL_TASK,
    );

    $items['admin/config/civicrm/sprelasync/add_rule/%rule_id'] = array(
        'title'            => t('Add Association Rule'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('sprelasync_add_rule_form', 1),
        'access callback'  => 'user_access',
        'access arguments' => array('access civicrm relationship role setting'),
        'type'             => MENU_LOCAL_TASK,
    );

    $items['admin/config/civicrm/sprelasync/configure'] = array(
        'title'            => t('Configure'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('sprelasync_configure'),
        'access callback'  => 'user_access',
        'access arguments' => array('access civicrm relationship role setting'),
        'type'             => MENU_LOCAL_TASK,
    );

    $items['admin/config/civicrm/sprelasync/manual_sync'] = array(
        'title'            => t('Manually Synchronize'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('sprelasync_manual_sync'),
        'access callback'  => 'user_access',
        'access arguments' => array('access civicrm relationship role setting'),
        'type'             => MENU_LOCAL_TASK,
    );

    return $items;
}

/**
 * Implementation of hook_permission().
 */
function sprelasync_permission() {
    return array(
        'access civicrm relationship role setting' =>
            array('title'       => t('Access CiviCRM relationship role setting'),
                  'description' => t('Access Civicrm relationship roles synchronization.'),
            ),
    );
}

/**
 * Implementation of hook_user_login().
 */
function sprelasync_user_login(&$edit, $account) {
    sprelasync_sync_user($account);
}

/**
 * Implementation of hook_user_logout().
 */
function sprelasync_user_logout($account) {
    sprelasync_sync_user($account);
}

function sprelasync_sync_user($account) {
    if(!civicrm_initialize()) {
        return;
    }
    if(variable_get('sprelasync_sync_method', 0) == 0) {
        _sprelasync_sync($account->uid);
    }
}

/**
 * Implementation of hook_cron().
 */
function sprelasync_cron() {
    if(!civicrm_initialize(true)) {
        return;
    }
    if(variable_get('sprelasync_sync_method', 0) == 1) {
        _sprelasync_sync();
    }
}

/**
 * Show stored association rules and delete rules.
 */
function sprelasync_show_rules($action = null, $id = null) {
    if(!civicrm_initialize()) {
        return;
    }
    //Delete rule
    if($action == 'delete') {
        if(is_numeric($id)) {
            $delete = db_delete('sp_relasync_rules')->condition('rule_id', $id)->execute();
            if($delete) {
                drupal_set_message(t('Rule ID !1 was successfully deleted.', array('!1' => $id)));
            } else {
                drupal_set_message(t('There was an error deleting the association rule. Please check your database settings and try again. If you continue to get this error message then try to reinstall Relationship Sync.'), $type = 'error');
            }
        }
    }

    $type = _sprelasync_get_data('types');
    $roles = user_roles(true);

    //Begin building main output table.
    $header = array('rid'         => t('Rule ID'),
                    'rule_name'   => t('CiviCRM Relationship Name'),
                    'direction'   => t('Direction'),
                    'role_name'   => t('Drupal Role'),
                    'active_only' => t('Active Only?'),
                    'options'     => t('Operation'),
    );
    $data = array();

    $rules = db_select('sp_relasync_rules', 'cmr')->fields('cmr')->orderBy('rule_id', 'ASC')->execute()->fetchAll();
    foreach ($rules as $result) {

        $data[] = array(
            'rid'         => check_plain($result->rule_id),
            'rule_name'   => check_plain($type[$result->rel_id]),
            'direction'   => ($result->direction == 1 ? 'A -> B' : 'B -> A'),
            'role_name'   => check_plain($roles[$result->rid]),
            'active_only' => ($result->active_only ? 'Y' : 'N'),
            'options'     => l('Bewerken', 'admin/config/civicrm/sprelasync/add_rule' . '/' . check_plain($result->rule_id)) . '&nbsp;&nbsp;&nbsp;' . l('Verwijderen', 'admin/config/civicrm/sprelasync/delete' . '/' . check_plain($result->rule_id)),
        );
    }

    if(!empty($data)) {
        $output['data'] = array(
            '#prefix' => t("Use the 'Add Association Rule' form to add new rules.") . '<br/><br/>',
            '#theme'  => 'table',
            '#header' => $header,
            '#rows'   => $data,
        );
    } else {
        $output = t("There are no rules currently set. Use the 'Add Association Rule' form to add one.");
    }

    return $output;
}

/**
 * Manual sync form. Provides a sumbit button to manually sync memberships to roles.
 *
 * @ingroup forms
 * @see sprelasync_manual_sync_submit()
 */
function sprelasync_manual_sync() {
    $form = array();
    $form['manual_sync'] = array(
        '#type'  => 'fieldset',
        '#title' => t('Manual Synchronization:'),
    );
    $form['manual_sync']['manual_sync_submit'] = array(
        '#type'  => 'submit',
        '#value' => t('Synchronize CiviCRM Relationships to Drupal Roles now'),
    );

    return $form;
}

/**
 * Implementation of hook_submit() for the manual sync form.
 */
function sprelasync_manual_sync_submit($form, &$form_state) {
    if(!civicrm_initialize()) {
        return;
    }
    if(_sprelasync_sync()) {
        drupal_set_message(t('CiviCRM Relationships and Drupal Roles have been synchronized using available rules.'));
    } else {
        drupal_set_message(t('There was an error. CiviCRM Relationships and Drupal Roles could not be synchronized.'), $type = 'error');
    }
}

/**
 * Configuration form. Allows user to edit the Automatic Synchronization Method.
 *
 * @ingroup forms
 */
function sprelasync_configure() {
    $form = array();
    $form['settings'] = array(
        '#type'  => 'fieldset',
        '#title' => t('Settings'),
    );
    $form['settings']['sprelasync_sync_method'] = array(
        '#type'          => 'radios',
        '#title'         => t('Automatic Synchronization Method'),
        '#description'   => t('Select which method Relationship Sync will use to automatically synchronize Relationships and Roles. If you choose user login/logout, you will have to run an initial "Manual Synchronization" after you create a new rule for it to be applied to all users and contacts. Leave the default setting if you are unsure which method to use.'),
        '#default_value' => variable_get('sprelasync_sync_method', 0),
        '#options'       => array(
            0 => t('Synchronize whenever a user logs in or logs out. This action is performed only on the user logging in or out.'),
            1 => t('Synchronize when Drupal cron is ran. This action will be performed on all users and contacts.'),
            2 => t('Disable automatic synchronization. You will have to use the "Manually Synchronize" form to synchronize memberships and roles yourself.'),
        ),
    );

    return system_settings_form($form);
}

/**
 * Implementation of hook_form(). Add/edit association rules.
 *
 * @ingroup forms
 * @see sprelasync_add_rule_validate()
 * @see sprelasync_add_rule_submit()
 */
function sprelasync_add_rule_form($form = null, $form_state = null, $id = null) {
    if(!civicrm_initialize()) {
        return;
    }

    $relationship_options = _sprelasync_get_data('types');
    $roles = user_roles(true);

    //Let's get rid of the authenticated role as it is a useless option for this module
    unset($roles[2]);

    //Begin add form
    $form = array();
    $form['add_rule'] = array(
        '#type'        => 'fieldset',
        '#title'       => t('Association Rule'),
        '#description' => t('Choose a CiviCRM Relationship and a Drupal Role below. This will associate that Relationship with the Role. If you would like the have the same Relationship be associated with more than one role, you will need to add a second association rule after you have completed this one.'),
        '#tree'        => true,
        '#parents'     => array('add_rule'),
    );
    $form['add_rule']['select_relationship'] = array(
        '#type'     => 'select',
        '#title'    => t('Select a Relationship'),
        '#options'  => $relationship_options,
        '#required' => true,
    );
    $form['add_rule']['direction'] = array(
        '#type'     => 'select',
        '#title'    => t('Relationship Direction'),
        '#options'  => array(1 => 'A -> B', 2 => 'B -> A'),
        '#required' => true,
    );
    $form['add_rule']['select_role'] = array(
        '#type'     => 'select',
        '#title'    => t('Select a Drupal Role'),
        '#options'  => $roles,
        '#required' => true,
    );
    $form['add_rule']['active_only'] = array(
        '#type'  => 'checkbox',
        '#title' => t('Sync for active relationships only'),
    );
    $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => t('Add association rule'),
    );

    //Begin edit form
    if(!empty($id) && is_numeric($id)) {

        $default_values = db_select('sp_relasync_rules', 'cmr')->fields('cmr')->condition('rule_id', $id)->execute()->fetchObject();
        if(!$default_values) {
            drupal_set_message(t('There was an error in obtaining the association rule for edit. Please check your database settings and try again. If you continue to get this error message then try to reinstall Relationship Sync.'));
            return $form;
        }

        //Alter above add form with default values.
        $form['add_rule']['select_relationship']['#default_value'] = $default_values->rel_id;
        $form['add_rule']['direction']['#default_value'] = $default_values->direction;
        $form['add_rule']['select_role']['#default_value'] = $default_values->rid;
        $form['add_rule']['active_only']['#default_value'] = $default_values->active_only;
        $form['edit_flag'] = array('#type' => 'hidden', '#value' => check_plain($id));
        $form['submit']['#value'] = t('Edit association rule');
    }

    return $form;
}

/**
 * Implementation of hook_validate() for the add/edit rule form.
 */
function sprelasync_add_rule_form_validate($form, &$form_state) {
    if(is_numeric($form_state['values']['add_rule']['select_relationship']) && is_numeric($form_state['values']['add_rule']['select_role'])) {
        if($form_state['values']['add_rule']['select_relationship'] == 0 || $form_state['values']['add_rule']['select_role'] == 0) {
            form_set_error('add_rule', t('You must select both a CiviCRM Relationship and a Drupal Role from the "Association Rule" section.'));
        }
    } else {
        form_set_error('add_rule', t('CiviCRM Relationship and Drupal Role values were not numeric.'));
    }

    if(!isset($form_state['values']['add_rule']['direction']) || $form_state['values']['add_rule']['direction'] == 0) {
        form_set_error('add_rule', t('You must select a direction for the relationship.'));
    }

    //Validate edit flag if set
    if(isset($form_state['values']['edit_flag']) && !is_numeric($form_state['values']['edit_flag'])) {
        form_set_error('', t('Edit flag was not numeric.'));
    }

    //Validate duplicate rules
    if(!isset($form_state['values']['edit_flag'])) {
        $result = false;
        $relationshipId = (int)$form_state['values']['add_rule']['select_relationship'];
        $roleId = (int)$form_state['values']['add_rule']['select_role'];
        $direction = (int)$form_state['values']['add_rule']['direction'];

        $sql = db_select('sp_relasync_rules', 'cmr')->fields('cmr')->condition('rid', $roleId)->condition('rel_id', $relationshipId)->condition('direction', $direction)->execute()->fetchAll();
        foreach ($sql as $values) {
            if($values) {
                $result = true;
                break;
            }
        }
        if($result) {
            form_set_error('', t('This rule set already exists in the database.'));
        }
    }
}

/**
 * Implementation of hook_submit() for the add/edit rule form.
 */
function sprelasync_add_rule_form_submit($form, &$form_state) {
    if(!civicrm_initialize()) {
        return;
    }

    //If edit_flag is set then process as an edit form, if not then process as an add form.
    if(isset($form_state['values']['edit_flag'])) {
        $edit_rule = db_update('sp_relasync_rules')->fields(array(
            'rid'         => (int)$form_state['values']['add_rule']['select_role'],
            'rel_id'      => (int)$form_state['values']['add_rule']['select_relationship'],
            'direction'   => (int)$form_state['values']['add_rule']['direction'],
            'active_only' => (int)$form_state['values']['add_rule']['active_only'],
        ))->condition('rule_id', (int)$form_state['values']['edit_flag'])->execute();

        if($edit_rule) {
            drupal_set_message(t('Your association rule has been edited.'));
        }
    } else {
        $add_rule = db_insert('sp_relasync_rules')->fields(array(
            'rid'         => (int)$form_state['values']['add_rule']['select_role'],
            'rel_id'      => (int)$form_state['values']['add_rule']['select_relationship'],
            'direction'   => (int)$form_state['values']['add_rule']['direction'],
            'active_only' => (int)$form_state['values']['add_rule']['active_only'],
        ))->execute();
        if($add_rule) {
            drupal_set_message(t('Your association rule has been added.'));
        } else {
            drupal_set_message(t('There was an error adding the association rule. Please check your database settings and try again. If you continue to get this error message then try to reinstall Relationship Sync.'), $type = 'error');
        }
    }
}

/**
 * Finds contacts and applies roles based on the rules defined in the settings page. If the ext_uid param is defined then
 * this function will only sync one user.
 */
function _sprelasync_sync($ext_uid = null, $cid = null) {
    if(!civicrm_initialize()) {
        return;
    }

    $rules = db_query('SELECT * FROM {sp_relasync_rules}')->fetchAll();
    if(empty($rules) || $rules === false) {
        return false;
    }
    $relationships = $rid = array();
    foreach ($rules as $ruleValues) {
        $relationships[$ruleValues->rel_id][] = $ruleValues;
        $rid[] = $ruleValues->rid;
    }
    //Find all contacts that have relationship rules (or just use $ext_uid)
    if(empty($ext_uid) && empty($cid)) {
        $sql = "SELECT DISTINCT uf.contact_id, uf.uf_id FROM civicrm_uf_match uf
      LEFT JOIN civicrm_relationship r1 ON uf.contact_id = r1.contact_id_a
       LEFT JOIN civicrm_relationship r2 ON uf.contact_id = r2.contact_id_b
      WHERE (r1.id IS NOT NULL AND r1.relationship_type_id IN (" . implode(',', array_keys($relationships)) . "))
      OR (r2.id IS NOT NULL AND r2.relationship_type_id IN (" . implode(',', array_keys($relationships)) . "))
      ORDER BY r1.end_date DESC";
        //let's prioritise those ending last as then we are more likely to get relevant ones if it doesn't complete
        //obviously a better fix would be for it to chunk & save where it is up to
        $params = CRM_Core_DAO::$_nullArray;
        $errorMsg = 'unknown error';
        $errorParams = array();
    } else {
        if(!empty($ext_uid)) {
            //Let's get the UID's Contact ID so we only grab one record from the CiviCRM DB.
            $uid = $ext_uid;
            $sql = "SELECT contact_id, uf_id FROM civicrm_uf_match WHERE uf_id = %1";
            $params = array(1 => array($uid, "Integer"));
            $errorMsg = 'The uid: @uid did not have a CiviCRM Contact ID.';
            $errorParams = array('@uid' => (int)$ext_uid);
        } else {
            // Seems silly to add this query, but the while loop below needs result set.
            $sql = "SELECT contact_id, uf_id FROM civicrm_uf_match contact_id = %1";
            $params = array(1 => array($cid, "Integer"));
            $errorMsg = 'Unable to get CiviCRM Contact ID @cid.';
            $errorParams = array('@uid' => (int)$cid);
        }
    }
    $contacts = CRM_Core_DAO::executeQuery($sql, $params);
    if($contacts->N == 0) {
        watchdog('sprelasync',
            $errorMsg,
            $errorParams,
            WATCHDOG_ERROR
        );
        return false;
    }

    $allRoles = user_roles(true);
    while ($contacts->fetch()) {

        $cid = & $contacts->contact_id;
        $uid = & $contacts->uf_id;

        $addRoles = array();
        $delRoles = array();

        // Get all relationships for this contact
        $sql = "SELECT * FROM civicrm_relationship WHERE contact_id_a = %1 OR contact_id_b = %1 AND relationship_type_id IN (" . implode(',', array_keys($relationships)) . ")";
        $params = array(1 => array($cid, "Integer"));
        $relrec = CRM_Core_DAO::executeQuery($sql, $params);

        if($relrec->N == 0 && !empty($rid)) {
            if(is_array($rid)) {
                $rid = implode(",", $rid);
            }
            // Clear all roles if a user has no relationships
            db_delete('users_roles')->condition('uid', $uid)->condition('rid', $rid)->execute();

        } else {

            // Fetch all relationships, find matching rules, and decide which roles to add / remove
            while ($relrec->fetch()) {

                $rules = $relationships[$relrec->relationship_type_id];
                if(!$rules || count($rules) == 0)
                    continue;

                foreach ($rules as $rule) {

                    if(
                        (($rule->direction == 1 && $relrec->contact_id_a == $cid) || ($rule->direction == 2 && $relrec->contact_id_b == $cid)) &&
                        ($rule->active_only == 0 || $relrec->is_active == 1)
                    ) {
                        $addRoles[] = $rule->rid;
                    } else {
                        $delRoles[] = $rule->rid;
                    }

                }
            }

            // Write roles
            // echo "WOULD ADD ROLES " . print_r($addRoles, true) . " AND DELETE ROLES " . print_r($delRoles, true) . " FOR CONTACT " . $cid . " (UID " . $uid . ").<br />\n";

            if(count($addRoles) > 0 || count($delRoles) > 0) {

                $addRoles = array_unique($addRoles);
                $delRoles = array_unique($delRoles);

                $account = user_load($uid, true);
                if($account !== false) {

                    $rolesRetain = array_diff_key($account->roles, array_flip($delRoles));

                    foreach ($addRoles as $addRole) {
                        $rolesRetain[$addRole] = $allRoles[$addRole];
                    }

                    // echo "WOULD WRITE ROLES " . print_r($rolesRetain, true) . ".<br />\n\n";
                    user_save($account, array('roles' => $rolesRetain));
                }
            }
        }
    }

    return true;
}

/**
 * This function returns an array of either membership types or status rules depending on the $type param.
 */
function _sprelasync_get_data($type) {
    if(!civicrm_initialize()) {
        return;
    }

    switch ($type) {
        case 'types':
            $sql = 'SELECT id, CONCAT(label_a_b, " / ", label_b_a) AS name FROM civicrm_relationship_type;';
            break;

        default:
            $sql = '';
            drupal_set_message(t('Invalid parameter was given to _sprelasync_get_data(). Param: "!1".', array('!1' => $type)));
            break;
    }

    $dao = CRM_Core_DAO::executeQuery($sql);

    $result = array();
    while ($dao->fetch()) {
        $result[$dao->id] = $dao->name;
    }

    unset($dao);

    if(empty($result)) {
        drupal_set_message(t('SP CiviCRM Relationship Sync Rules have not been configured. Please do so on the "Administer CiviCRM" page.'), $type = 'error');
    }

    return $result;
}

